// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qa-tools-family/go-practices-in-actions/tests/mock/spider (interfaces: Spider)

// Package spider is a generated GoMock package.
package spider

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSpider is a mock of Spider interface.
type MockSpider struct {
	ctrl     *gomock.Controller
	recorder *MockSpiderMockRecorder
}

// MockSpiderMockRecorder is the mock recorder for MockSpider.
type MockSpiderMockRecorder struct {
	mock *MockSpider
}

// NewMockSpider creates a new mock instance.
func NewMockSpider(ctrl *gomock.Controller) *MockSpider {
	mock := &MockSpider{ctrl: ctrl}
	mock.recorder = &MockSpiderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpider) EXPECT() *MockSpiderMockRecorder {
	return m.recorder
}

// GetBody mocks base method.
func (m *MockSpider) GetBody() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockSpiderMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockSpider)(nil).GetBody))
}

// GetName mocks base method.
func (m *MockSpider) GetName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockSpiderMockRecorder) GetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockSpider)(nil).GetName), arg0)
}
